import java.util.ArrayList;
import java.util.Scanner;
import java.util.UUID;

public class HDFCAccount implements BankAccountInterface{

    private String name;
    // name will be given by customers

    private String accountNumber;
    // account will be generated by bank authorities
    // to generate random account number we will use (unique UUID)

    private String password;
    // password will be given by customer
    private double balance;
    // balance will be given by customergit commit -m "submit"

    final double rateOfInterest=7.1;
    // made final soo that it the value cannot be changed its fixed

    final String IFSCCode= "HDFC374873";
    // made final because everyone in this bank branch will have same IFSC code

    final double minimumBalanceInAccount=5000.0;
    // user has to maintain balance above minimumBalanceInAccount to operate Account in Bank

    private ArrayList<TransactionHistory> list=new ArrayList<>();
    // to store History of all Transaction

    private int count=1;

    // we should always make 2 constructor 1) default 2) all parametrised constructor

    // parametrised constructor
    public HDFCAccount(String name, String password, double balance) {
        this.name = name;
        this.password = password;
        this.balance = balance;
        this.accountNumber= String.valueOf(UUID.randomUUID());
        // UUID generated random combination of collection characters and number
        recordTransaction(" Deposit ",balance);
        System.out.println();
        System.out.println("Account Successfully Created..");
        System.out.println();
    }
    // default constructor
    public HDFCAccount() {
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    public double getRateOfInterest() {
        return rateOfInterest;
    }

    public String getIFSCCode() {
        return IFSCCode;
    }

    public double getMinimumBalanceInAccount() {
        return minimumBalanceInAccount;
    }

    @Override
    public String fetchBalance(String password) {
        if(this.password.equals(password)){
            return "Your Balance is: "+this.balance;
        }
        return "Your password is Incorrect!!";
    }

    @Override
    public String addMoney(double amount) {
        if (amount < 0){
            return "Invalid!!";
        }
        double prevBalance=this.balance;
        this.balance=this.balance+amount;
        recordTransaction(" Deposit ",amount);
        return "Your Balance was: "+prevBalance+" after adding amount: "+amount+" Balance is: "+ this.balance;
    }

    @Override
    public String withDrawMoney(double amount, String password) {
        if (amount < 0){
            return "Invalid!!";
        }
        if(this.password.equals(password)){
            if(this.balance < amount) {
                return "Balance is Insufficient!!";
            }
            double prevBalance=this.balance;
            this.balance=this.balance-amount;
            if(this.balance < minimumBalanceInAccount){
                recordTransaction(" WithDraw ",amount);
                return "Your Balance was: "+prevBalance+" after Withdrawal amount: "+amount+" Balance is: "+ this.balance+" and your Balance is Below Minimum Balance Limit Add Money "+(this.minimumBalanceInAccount-this.balance)+ " to Maintain Balance in Account ";
            }
            recordTransaction(" WithDraw ", amount);
            return "Your Balance was: "+prevBalance+" after Withdrawal amount: "+amount+" Balance is: "+ this.balance;
        }
        return "Incorrect Password!!";
    }

    @Override
    public String changePassword(String oldPassowrd, String newPassword) {
        while(newPassword.length()<8){
            System.out.println();
            System.out.println("Invalid!!");
            System.out.println("New Password should be Length greater or equal to 8");
            System.out.println("Enter New Password: ");
            Scanner scanner=new Scanner(System.in);
            newPassword = scanner.nextLine();
        }
        if(this.password.equals(oldPassowrd)){
            this.password=newPassword;
            return "Password Change Successfully..";
        }
        return "InCorrect Original Password!!";
    }

    @Override
    public double calculateInterest(int year) {
        return (this.balance*year*rateOfInterest)/100.0;
    }

    @Override
    public void recordTransaction(String type, double amount) {
        list.add(new TransactionHistory(count,type,amount,this.balance));
        count++;
    }

    @Override
    public ArrayList<TransactionHistory> getTransaction() {
        return list;
    }

    @Override
    public String toString() {
        return "HDFCAccount{" +
                "name='" + name + '\'' +
                ", accountNumber='" + accountNumber + '\'' +
                ", password='" + password + '\'' +
                ", balance=" + balance +
                ", rateOfInterest=" + rateOfInterest +
                ", IFSCCode='" + IFSCCode + '\'' +
                ", minimumBalanceInAccount=" + minimumBalanceInAccount +
                '}';
    }
}
